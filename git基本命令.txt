
//在此文件夹里初始化
git init

//第一次需要把远程仓库的项目clone到本文件夹（第二次以后用pull更新同步）
git clone https://github.com/jianlilu/thooo.git

//将需要提交的文件添加到仓库
git add README.md   或  git add .

//把文件提交到仓库（本地）
git commit -m "first commit"

//本地与远程仓库建立连接
git remote add origin https://github.com/jianlilu/thooo.git

//push 到远程仓库
git push -u origin master

//拉取（当远程仓库和本地不一致时，先pull,再add,commit,push）
git pull origin master


//安装完成后，还需要最后一步设置，在命令行输入：

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
//因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心//，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有//冒充的也是有办法可查的。

//注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置//，当然也可以对某个仓库指定不同的用户名和Email地址

//创建hello文件夹
$ mkdir hello

//进入hello文件夹
$ cd hello

//用于显示当前目录
$ pwd
	/c/Users/w/Desktop/note/hello

//通过git init命令把这个目录变成Git可以管理的仓库：
$ git init	
	
//列出此文件夹里所有文件
$ ls -ah

//让我们时刻掌握仓库当前的状态
$ git status


//git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式
$ git diff

//git log命令显示从最近到最远的提交日志
$ git log

//如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
$ git log --pretty=oneline

//git reflog查看命令历史，以便确定要回到未来的哪个版本。
$ git reflog

//回退到了上个版本
$ git reset --hard HEAD^

//（回到$ git reset --hard HEAD^之前的版本）（3628164是版本号，在GitHub中history里找到）
$ git reset --hard 3628164














/*
首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。

不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的

执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。

为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件


要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。


当然了，在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看;


首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100


HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

*/
	

















